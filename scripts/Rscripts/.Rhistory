tumor_ids <- grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)
tumor_ids
wbc_ids <- grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)
wbc_ids
wbc_ids <- sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE))
wbc_ids
tumor_ids <- sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE))
wbc_ids <- sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE))
length(tumor_ids)
length(wbc_ids)
tumor_sample <- lapply(tumor_ids, function(some_string) str.split(some_string, "-cfDNA")[[1]][[1]])
WBC_sample <- lapply(wbc_ids, function(some_string) str.split(some_string, "-WBC")[[1]][[1]])
library(dplyr)
# get the sample ids and sort
tumor_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# some string magic to make sure we match the ids
tumor_sample <- lapply(tumor_ids, function(some_string) str.split(some_string, "-cfDNA")[[1]][[1]])
WBC_sample <- lapply(wbc_ids, function(some_string) str.split(some_string, "-WBC")[[1]][[1]])
tumor_sample <- lapply(tumor_ids, function(some_string) strsplit(some_string, "-cfDNA")[[1]][[1]])
WBC_sample <- lapply(wbc_ids, function(some_string) strsplit(some_string, "-WBC")[[1]][[1]])
WBC_sample
tumor_sample
tumor_sample == WBC_sample
intersect(tumor_sample, WBC_sample)
match(intersect(tumor_sample, WBC_sample), tumor_sample)
match(intersect(tumor_sample, WBC_sample), WBC_sample)
# subset both to common elements
idx <- match(intersect(tumor_sample, WBC_sample), tumor_sample)
idx
tumor_ids <- tumor_ids[[idx]]
tumor_ids <- tumor_ids[idx]
tumor_ids
library(dplyr)
# get the sample ids and sort
tumor_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# some string magic to make sure we match the ids
tumor_sample <- lapply(tumor_ids, function(some_string) strsplit(some_string, "-cfDNA")[[1]][[1]])
WBC_sample <- lapply(wbc_ids, function(some_string) strsplit(some_string, "-WBC")[[1]][[1]])
# subset both to common elements
idx <- match(intersect(tumor_sample, WBC_sample), tumor_sample)
tumor_ids <- tumor_ids[[idx]]
idx <- match(intersect(tumor_sample, WBC_sample), wbc_sample)
wbc_ids <- wbc_ids[[idx]]
tumor_ids == wbc_ids
library(dplyr)
# get the sample ids and sort
tumor_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# some string magic to make sure we match the ids
tumor_sample <- lapply(tumor_ids, function(some_string) strsplit(some_string, "-cfDNA")[[1]][[1]])
WBC_sample <- lapply(wbc_ids, function(some_string) strsplit(some_string, "-WBC")[[1]][[1]])
# subset both to common elements
idx <- match(intersect(tumor_sample, WBC_sample), tumor_sample)
tumor_ids <- tumor_ids[idx]
idx <- match(intersect(tumor_sample, WBC_sample), wbc_sample)
wbc_ids <- wbc_ids[idx]
tumor_ids == wbc_ids
library(dplyr)
# get the sample ids and sort
tumor_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# some string magic to make sure we match the ids
tumor_sample <- lapply(tumor_ids, function(some_string) strsplit(some_string, "-cfDNA")[[1]][[1]])
WBC_sample <- lapply(wbc_ids, function(some_string) strsplit(some_string, "-WBC")[[1]][[1]])
# subset both to common elements
idx <- match(intersect(tumor_sample, WBC_sample), tumor_sample)
tumor_ids <- tumor_ids[idx]
idx <- match(intersect(tumor_sample, WBC_sample), WBC_sample)
wbc_ids <- wbc_ids[idx]
tumor_ids == wbc_ids
tumor_ids
wbc_ids
tumor_ids
if (identical(tumor_sample, wbc_sample)) {print("Good to go!")} else {"Something is seriously wrong."}
library(dplyr)
# get the sample ids and sort
tumor_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# some string magic to make sure we match the ids
tumor_sample <- lapply(tumor_ids, function(some_string) strsplit(some_string, "-cfDNA")[[1]][[1]])
wbc_sample <- lapply(wbc_ids, function(some_string) strsplit(some_string, "-WBC")[[1]][[1]])
# subset both to common elements
idx <- match(intersect(tumor_sample, wbc_sample), tumor_sample)
tumor_ids <- tumor_ids[idx]
tumor_sample <- tumor_sample[idx]
idx <- match(intersect(tumor_sample, wbc_sample), wbc_sample)
wbc_ids <- wbc_ids[idx]
wbc_sample <- wbc_sample[idx]
tumor_sample == wbc_sample
if (identical(tumor_sample, wbc_sample)) {print("Good to go!")} else {"Something is seriously wrong."}
sample_type <- "ctDNA"
path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results", sample_type, sep = "/")
vcf_list <- list.files(path_to_vcf)
to_remove <- grep(list.files(path_to_vcf), "invalid")
to_remove <- grep("invalid", list.files(path_to_vcf))
to_remove
vcf_list
path_to_vcf
sample_type <- "ctDNA_prognosis"
path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results", sample_type, sep = "/")
vcf_list <- list.files(path_to_vcf)
to_remove <- grep("invalid", list.files(path_to_vcf))
to_remove
vcf_list <- list.files(path_to_vcf)[-to_remove]
vcf_list
to_keep <- grep("filtered&multianno", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are not interested in
to_keep
?grep
to_keep <- grep("bam_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are not interested in
to_keep
length(to_keep)
sample_list <- tumor_sample
grep(unlist(sample_list), vcf_list)
sample_list
unlist(sample_list)
vcf_list
mapply(grep, unlist(smaple_list), vcf_list)
mapply(grep, unlist(sample_list), vcf_list)
mapply(grep, sample_list, vcf_list)
sample_list
vcf_list
path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results", sample_type, sep = "/")
vcf_list <- grep("bam_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
grep(unlist(sample_list), vcf_list)
mapply(grep, sample_list, vcf_list)
vcf_list
vcf_list
path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results", sample_type, sep = "/")
idx <- grep("bam_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- list.files(path_to_vcf)[idx]
grep(unlist(sample_list), vcf_list)
mapply(grep, sample_list, vcf_list)
vcf_list
sample_list
sample_list
vcf_list
sample_list
vcf_list
path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results", sample_type, sep = "/")
idx <- grep("bam_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx])
mapply(grep, sample_list, vcf_list)
vcf_list
sample_list
lapply(vcf_list, function(some_vcf_name, sample_list) if (!grepl(sample, some_vcf_name)) {vcf_list = vcf_list[!(vcf_list %in% sample)]} )
lapply(vcf_list, function(some_vcf_name, sample_list) if (!grepl(sample, some_vcf_name)) {vcf_list <- vcf_list[!(vcf_list %in% sample)]} )
sample
lapply(vcf_list, function(some_vcf_name, sample_list) if (!grepl(sample_list, some_vcf_name)) {vcf_list <- vcf_list[!(vcf_list %in% sample_list)]} )
sample_list
lapply(vcf_list, function(some_vcf_name, sample_list) {if (!grepl(sample_list, some_vcf_name)) {vcf_list <- vcf_list[!(vcf_list %in% sample_list)]}} )
sample_list
lapply(vcf_list, function(some_vcf_name, sample_list) if (!grepl(sample_list, some_vcf_name)) {vcf_list <- vcf_list[!(vcf_list %in% sample_list)]} )
some_vcf_name
some_vcf_name <- vcf_list[1]
some_vcf_name
grepl(sample_list, some_vcf_name)
sample_list
for (sample_name in sample_list) {
if (!grepl(sample_name, vcf_list)) {vcf_list <- vcf_list[!(vcf_list %in% sample_name)]}
}
warnings()
vcf_list
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_list
vcf_ids <- lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", "sample_type"))[[1]][[1]]) # sample names extracted from the vcf list
vcf_ids
sample_type <- "cfDNA"
vcf_ids <- lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", "sample_type"))[[1]][[1]]) # sample names extracted from the vcf list
vcf_ids
vcf_ids <- lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]) # sample names extracted from the vcf list
vcf_ids
sample_type
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results/GU_finland_download")}
idx <- grep("bam_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]) # sample names extracted from the vcf list
vcf_ids
sample_list
idx <- match(intersect(vcf_ids, sample_list), vcf_list)
idx
intersect(vcf_ids, sample_list)
idx <- match(intersect(vcf_ids, sample_list), vcf_ids)
idx
# load vcf based on the sample type provided by user
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results/GU_finland_download")}
idx <- grep("bam_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]) # sample names extracted from the vcf list
idx <- match(intersect(vcf_ids, sample_list), vcf_ids)
vcf_list <- vcf_list[idx]
vcf_list
load_vcf_files <- function(sample_type, sample_list){
# sample type: given as a string, either "cfDNA" or "WBC".
# sample_list: Sample ids we are interested in retrieving as a vcf file, since not all files have a tumor and wbc match.
# load vcf based on the sample type provided by user
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/annovar_results/GU_finland_download")}
idx <- grep("bam_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]) # sample names extracted from the vcf list
idx <- match(intersect(vcf_ids, sample_list), vcf_ids)
vcf_list <- vcf_list[idx]
return(vcf_list)
}
# load the vcf files
tumor_vcf <- load_vcf_files("cfDNA", tumor_sample)
wbc_vcf <- load_vcf_files("WBC", wbc_sample)
wbc_vcf
tumor_vcf
load_vcf_files <- function(sample_type, sample_list){
# sample type: given as a string, either "cfDNA" or "WBC".
# sample_list: Sample ids we are interested in retrieving as a vcf file, since not all files have a tumor and wbc match.
# load vcf based on the sample type provided by user
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
idx <- grep(".bam_vcf_FILTERED_vcf", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]) # sample names extracted from the vcf list
idx <- match(intersect(vcf_ids, sample_list), vcf_ids)
vcf_list <- vcf_list[idx]
return(vcf_list)
}
tumor_vcf <- load_vcf_files("cfDNA", tumor_sample)
wbc_vcf <- load_vcf_files("WBC", wbc_sample)
tumor_vcf
wbc_vcf
wbc_sample
load_vcf_files <- function(sample_type, sample_list){
# sample type: given as a string, either "cfDNA" or "WBC".
# sample_list: Sample ids we are interested in retrieving as a vcf file, since not all files have a tumor and wbc match.
# load vcf based on the sample type provided by user
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
idx <- grep(".bam_vcf_FILTERED_vcf", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]) # sample names extracted from the vcf list
idx <- match(intersect(vcf_ids, sample_list), vcf_ids)
vcf_list <- vcf_list[idx]
return(vcf_list)
}
# get the sample ids and sort
tumor_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# some string magic to make sure we match the ids
tumor_sample <- lapply(tumor_ids, function(some_string) strsplit(some_string, "-cfDNA")[[1]][[1]])
wbc_sample <- lapply(wbc_ids, function(some_string) strsplit(some_string, "-WBC")[[1]][[1]])
# subset both to common elements
idx <- match(intersect(tumor_sample, wbc_sample), tumor_sample)
tumor_ids <- tumor_ids[idx]
tumor_sample <- tumor_sample[idx]
idx <- match(intersect(tumor_sample, wbc_sample), wbc_sample)
wbc_ids <- wbc_ids[idx]
wbc_sample <- wbc_sample[idx]
# check if the two lists are identical
if (identical(tumor_sample, wbc_sample)) {print("Good to go!")} else {"Something is seriously wrong."}
# load the vcf files
tumor_vcf <- load_vcf_files("cfDNA", tumor_sample)
wbc_vcf <- load_vcf_files("WBC", wbc_sample)
wbc_vcf
smaple_type <- "WBC"
sample_type <- "WBC"
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
path_to_vcf
idx <- grep(".bam_vcf_FILTERED_vcf", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_list
vcf_ids <- lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]) # sample names extracted from the vcf list
vcf_ids
vcf_ids <- unique(lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]))# sample names extracted from the vcf list
vcf_ids
idx <- match(intersect(vcf_ids, sample_list), vcf_ids)
vcf_list <- vcf_list[idx]
vcf_list
vcf_ids
sample_list
vcf_ids
vcf_ids
match(intersect(vcf_ids, sample_list), vcf_ids)
idx <- vcf_ids[match(intersect(vcf_ids, sample_list), vcf_ids)]
idx
vcf_list
samples_to_keep <- paste0(vcf_ids[match(intersect(vcf_ids, sample_list), vcf_ids)], "-WBC.bam_vcf_FILTERED_vcf")
samples_to_keep
library(dplyr)
load_vcf_files <- function(sample_type, sample_list){
# sample type: given as a string, either "cfDNA" or "WBC".
# sample_list: Sample ids we are interested in retrieving as a vcf file, since not all files have a tumor and wbc match.
# load vcf based on the sample type provided by user
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
idx <- grep(".bam_vcf_FILTERED_vcf", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- unique(lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]))# sample names extracted from the vcf list
vcf_list <- paste0(vcf_ids[match(intersect(vcf_ids, sample_list), vcf_ids)], "-WBC.bam_vcf_FILTERED_vcf")
return(vcf_list)
}
# get the sample ids and sort
tumor_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# some string magic to make sure we match the ids
tumor_sample <- lapply(tumor_ids, function(some_string) strsplit(some_string, "-cfDNA")[[1]][[1]])
wbc_sample <- lapply(wbc_ids, function(some_string) strsplit(some_string, "-WBC")[[1]][[1]])
# subset both to common elements
idx <- match(intersect(tumor_sample, wbc_sample), tumor_sample)
tumor_ids <- tumor_ids[idx]
tumor_sample <- tumor_sample[idx]
idx <- match(intersect(tumor_sample, wbc_sample), wbc_sample)
wbc_ids <- wbc_ids[idx]
wbc_sample <- wbc_sample[idx]
# check if the two lists are identical
if (identical(tumor_sample, wbc_sample)) {print("Good to go!")} else {"Something is seriously wrong."}
# load the vcf files
tumor_vcf <- load_vcf_files("cfDNA", tumor_sample)
wbc_vcf <- load_vcf_files("WBC", wbc_sample)
tumor_vcf
wbc_vcf
tumor_vcf
library(dplyr)
load_vcf_files <- function(sample_type, sample_list){
# sample type: given as a string, either "cfDNA" or "WBC".
# sample_list: Sample ids we are interested in retrieving as a vcf file, since not all files have a tumor and wbc match.
# load vcf based on the sample type provided by user
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
idx <- grep("vcf", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- unique(lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]))# sample names extracted from the vcf list
vcf_list <- paste0(vcf_ids[match(intersect(vcf_ids, sample_list), vcf_ids)], "-WBC.bam_vcf_FILTERED_vcf")
return(vcf_list)
}
# get the sample ids and sort
tumor_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# some string magic to make sure we match the ids
tumor_sample <- lapply(tumor_ids, function(some_string) strsplit(some_string, "-cfDNA")[[1]][[1]])
wbc_sample <- lapply(wbc_ids, function(some_string) strsplit(some_string, "-WBC")[[1]][[1]])
# subset both to common elements
idx <- match(intersect(tumor_sample, wbc_sample), tumor_sample)
tumor_ids <- tumor_ids[idx]
tumor_sample <- tumor_sample[idx]
idx <- match(intersect(tumor_sample, wbc_sample), wbc_sample)
wbc_ids <- wbc_ids[idx]
wbc_sample <- wbc_sample[idx]
# check if the two lists are identical
if (identical(tumor_sample, wbc_sample)) {print("Good to go!")} else {"Something is seriously wrong."}
# load the vcf files
tumor_vcf <- load_vcf_files("cfDNA", tumor_sample)
wbc_vcf <- load_vcf_files("WBC", wbc_sample)
tumor_vcf
wbc_vcf
wbc_sample
sample_type
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
idx <- grep("vcf", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
idx
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_list
vcf_ids <- unique(lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]))# sample names extracted from the vcf list
vcf_ids
vcf_list <- paste0(vcf_ids[match(intersect(vcf_ids, sample_list), vcf_ids)], "-WBC.bam_vcf_FILTERED_vcf")
vcf_list
library(dplyr)
load_vcf_files <- function(sample_type, sample_list){
# sample type: given as a string, either "cfDNA" or "WBC".
# sample_list: Sample ids we are interested in retrieving as a vcf file, since not all files have a tumor and wbc match.
# load vcf based on the sample type provided by user
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
idx <- grep("vcf", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- unique(lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]))# sample names extracted from the vcf list
vcf_list <- paste0(vcf_ids[match(intersect(vcf_ids, sample_list), vcf_ids)], "-WBC.bam_vcf_FILTERED_vcf")
return(sort(vcf_list))
}
# get the sample ids and sort
tumor_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# some string magic to make sure we match the ids
tumor_sample <- lapply(tumor_ids, function(some_string) strsplit(some_string, "-cfDNA")[[1]][[1]])
wbc_sample <- lapply(wbc_ids, function(some_string) strsplit(some_string, "-WBC")[[1]][[1]])
# subset both to common elements
idx <- match(intersect(tumor_sample, wbc_sample), tumor_sample)
tumor_ids <- tumor_ids[idx]
tumor_sample <- tumor_sample[idx]
idx <- match(intersect(tumor_sample, wbc_sample), wbc_sample)
wbc_ids <- wbc_ids[idx]
wbc_sample <- wbc_sample[idx]
# check if the two lists are identical
if (identical(tumor_sample, wbc_sample)) {print("Good to go!")} else {"Something is seriously wrong."}
# load the vcf files
tumor_vcf <- identify_vcf_files("cfDNA", tumor_sample)
wbc_vcf <- identify_vcf_files("WBC", wbc_sample)
subset_to_id <- function(some_list, str_separator){
# Given a list of strings, subset it based on another list of strings.
to_compare <- lapply(some_list, function(x) strsplit(x, str_separator)[[1]][[1]])
# subset both to common elements
idx <- match(intersect(to_compare, wbc_sample), to_compare)
some_list <- some_list[idx]
to_compare <- to_compare[idx]
return([some_list, to_compare])
}
identify_vcf_files <- function(sample_type, sample_list){
# sample type: given as a string, either "cfDNA" or "WBC".
# sample_list: Sample ids we are interested in retrieving as a vcf file, since not all files have a tumor and wbc match.
# load vcf based on the sample type provided by user
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
idx <- grep("vcf", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- unique(lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]))# sample names extracted from the vcf list
vcf_list <- paste0(vcf_ids[match(intersect(vcf_ids, sample_list), vcf_ids)], "-WBC.bam_vcf_FILTERED_vcf")
return(sort(vcf_list))
}
find_common_variants <- function(tumor_vcf, wbc_vcf)
# this function assumes that these files are the same length, and they have the same ids in the same location in both
# get the sample ids and sort
some_list <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# subset
[tumor_ids, tumor_sample] <- subset_to_id(tumor_ids, "-cfDNA")
[wbc_ids, wbc_sample] <- subset_to_id(wbc_ids, "-WBC")
tumor_ids <- subset_to_id(tumor_ids, "-cfDNA")[1]
tumor_sample <- subset_to_id(tumor_ids, "-cfDNA")[2]
wbc_ids <- subset_to_id(wbc_ids, "-WBC")[1]
wbc_sample <- subset_to_id(wbc_ids, "-WBC")[2]
library(dplyr)
subset_to_id <- function(some_list, str_separator){
# Given a list of strings, subset it based on another list of strings.
to_compare <- lapply(some_list, function(x) strsplit(x, str_separator)[[1]][[1]])
# subset both to common elements
idx <- match(intersect(to_compare, wbc_sample), to_compare)
some_list <- some_list[idx]
to_compare <- to_compare[idx]
return(list(some_list, to_compare)
}
identify_vcf_files <- function(sample_type, sample_list){
# sample type: given as a string, either "cfDNA" or "WBC".
# sample_list: Sample ids we are interested in retrieving as a vcf file, since not all files have a tumor and wbc match.
# load vcf based on the sample type provided by user
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
idx <- grep("vcf", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- unique(lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]))# sample names extracted from the vcf list
vcf_list <- paste0(vcf_ids[match(intersect(vcf_ids, sample_list), vcf_ids)], "-WBC.bam_vcf_FILTERED_vcf")
return(sort(vcf_list))
}
find_common_variants <- function(tumor_vcf, wbc_vcf)
# this function assumes that these files are the same length, and they have the same ids in the same location in both
# get the sample ids and sort
some_list <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# subset
tumor_ids <- subset_to_id(tumor_ids, "-cfDNA")[1]
tumor_sample <- subset_to_id(tumor_ids, "-cfDNA")[2]
wbc_ids <- subset_to_id(wbc_ids, "-WBC")[1]
wbc_sample <- subset_to_id(wbc_ids, "-WBC")[2]
# check if the two lists are identical
if (identical(tumor_sample, wbc_sample)) {print("Good to go!")} else {"Something is seriously wrong."}
# idenitfy the vcf files
tumor_vcf <- identify_vcf_files("cfDNA", some_list_to_compare)
wbc_vcf <- identify_vcf_files("WBC", wbc_sample)
# make sure we have the same ids at the same locations in both lists
wbc_sample
tumor_sample
library(dplyr)
subset_to_id <- function(some_list, str_separator){
# Given a list of strings, subset it based on another list of strings.
to_compare <- lapply(some_list, function(x) strsplit(x, str_separator)[[1]][[1]])
# subset both to common elements
idx <- match(intersect(to_compare, wbc_sample), to_compare)
some_list <- some_list[idx]
to_compare <- to_compare[idx]
return(list(some_list, to_compare)
}
identify_vcf_files <- function(sample_type, sample_list){
# sample type: given as a string, either "cfDNA" or "WBC".
# sample_list: Sample ids we are interested in retrieving as a vcf file, since not all files have a tumor and wbc match.
# load vcf based on the sample type provided by user
if (sample_type == "cfDNA") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/ctDNA_prognosis")}
if (sample_type == "WBC") {path_to_vcf <- paste("/groups/wyattgrp/users/amunzur/chip_project/mutect_results_filtered/GU_finland_download")}
idx <- grep("vcf", list.files(path_to_vcf), ignore.case = TRUE) # idx of files we are interested in
vcf_list <- as.list(list.files(path_to_vcf)[idx]) # full name of the vcf files
vcf_ids <- unique(lapply(vcf_list, function(some_vcf) strsplit(some_vcf, paste0("-", sample_type))[[1]][[1]]))# sample names extracted from the vcf list
vcf_list <- paste0(vcf_ids[match(intersect(vcf_ids, sample_list), vcf_ids)], "-WBC.bam_vcf_FILTERED_vcf")
return(sort(vcf_list))
}
find_common_variants <- function(tumor_vcf, wbc_vcf)
# this function assumes that these files are the same length, and they have the same ids in the same location in both
# get the sample ids and sort
some_list <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/ctDNA_prognosis_ORIGINAL"), value = TRUE)))
wbc_ids <- as.list(sort(grep("^[GU]", list.files("/groups/wyattgrp/users/amunzur/chip_project/finland_bams/GU_finland_download_ORIGINAL"), value = TRUE)))
# subset
tumor_ids <- subset_to_id(tumor_ids, "-cfDNA")[1]
tumor_sample <- subset_to_id(tumor_ids, "-cfDNA")[2]
wbc_ids <- subset_to_id(wbc_ids, "-WBC")[1]
wbc_sample <- subset_to_id(wbc_ids, "-WBC")[2]
# check if the two lists are identical
if (identical(tumor_sample, wbc_sample)) {print("Good to go!")} else {"Something is seriously wrong."}
# idenitfy the vcf files
tumor_vcf <- identify_vcf_files("cfDNA", tumor_sample)
wbc_vcf <- identify_vcf_files("WBC", wbc_sample)
# make sure we have the same ids at the same locations in both lists
tumor_vcf
wbc_vcf
