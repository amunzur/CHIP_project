idx <- which(unlist(r) > 0 & unlist(r) < 1) # identify all elements that are between 0 and 1, they are the allele frequencies
if (length(idx) == 0 | any(r[idx] > 0.05)) {
return("BAD")
} else if (all(r[idx] < 0.05)){
return("GOOD")
}
}
annovar_path <- "/groups/wyattgrp/users/amunzur/chip_project/annovar_results/ctDNA_prognosis/"
common_variants_path <- "/groups/wyattgrp/users/amunzur/chip_project/common_variants/"
# load the dfs with common variants
for (file_name in list.files(common_variants_path)) {
sample_name <- strsplit(file_name, ".csv")[[1]][[1]]
noquote(c("Started sample", sample_name))
idx <- grep(paste0("^", sample_name, ".+_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt$"),
list.files(annovar_path))
anno_name <- list.files(annovar_path)[idx]
# load both files
sample <- read.csv(paste0(common_variants_path, file_name))
sample$X <- NULL
anno <- as.data.frame(read.delim(paste0(annovar_path, anno_name), sep = "\t"))
names(anno)[1:5] <- c("CHROM", "POS", "END", "REF", "ALT")
combined <- merge(x = sample, y = anno, by = c("CHROM", "POS", "ALT", "REF")) # merge!
combined[combined == "."] <- NA # replace all dots with NA, makes it easier to filter later on
combined <- Filter(function(x) !all(is.na(x)), combined) # drop cols if they are all filled with NA
status_list <- apply(combined, 1, filter_variants) # apply the function to every row to make of list of pass or fail status
combined$status <- status_list
path <- paste0("/groups/wyattgrp/users/amunzur/chip_project/common_variants_annovar/", file_name)
write_csv(combined, path)
}
library(tidyverse)
filter_variants <- function(r){
# Given a row that has variant information, add a PASS or FAIL status based on AF.
idx <- which(unlist(r) > 0 & unlist(r) < 1) # identify all elements that are between 0 and 1, they are the allele frequencies
if (length(idx) == 0 | any(r[idx] > 0.05)) {
return("BAD")
} else if (all(r[idx] < 0.05)){
return("GOOD")
}
}
annovar_path <- "/groups/wyattgrp/users/amunzur/chip_project/annovar_results/ctDNA_prognosis/"
common_variants_path <- "/groups/wyattgrp/users/amunzur/chip_project/common_variants/"
# load the dfs with common variants
for (file_name in list.files(common_variants_path)) {
sample_name <- strsplit(file_name, ".csv")[[1]][[1]]
noquote(c("Started sample", sample_name))
idx <- grep(paste0("^", sample_name, ".+_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt$"),
list.files(annovar_path))
anno_name <- list.files(annovar_path)[idx]
# load both files
sample <- read.csv(paste0(common_variants_path, file_name))
sample$X <- NULL
anno <- as.data.frame(read.delim(paste0(annovar_path, anno_name), sep = "\t"))
names(anno)[1:5] <- c("CHROM", "POS", "END", "REF", "ALT")
combined <- merge(x = sample, y = anno, by = c("CHROM", "POS", "ALT", "REF")) # merge!
combined[combined == "."] <- NA # replace all dots with NA, makes it easier to filter later on
combined <- Filter(function(x) !all(is.na(x)), combined) # drop cols if they are all filled with NA
status_list <- apply(combined, 1, filter_variants) # apply the function to every row to make of list of pass or fail status
combined$status <- status_list
path <- paste0("/groups/wyattgrp/users/amunzur/chip_project/common_variants_annovar/", file_name)
write_delim(combined, path, delim = "\t")
}
library(tidyverse)
filter_variants <- function(r){
# Given a row that has variant information, add a PASS or FAIL status based on AF.
idx <- which(unlist(r) > 0 & unlist(r) < 1) # identify all elements that are between 0 and 1, they are the allele frequencies
if (length(idx) == 0 | any(r[idx] > 0.05)) {
return("BAD")
} else if (all(r[idx] < 0.05)){
return("GOOD")
}
}
annovar_path <- "/groups/wyattgrp/users/amunzur/chip_project/annovar_results/ctDNA_prognosis/"
common_variants_path <- "/groups/wyattgrp/users/amunzur/chip_project/common_variants/"
# load the dfs with common variants
for (file_name in list.files(common_variants_path)) {
sample_name <- strsplit(file_name, ".csv")[[1]][[1]]
noquote(c("Started sample", sample_name))
idx <- grep(paste0("^", sample_name, ".+_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt$"),
list.files(annovar_path))
anno_name <- list.files(annovar_path)[idx]
# load both files
sample <- read.csv(paste0(common_variants_path, file_name))
sample$X <- NULL
anno <- as.data.frame(read.delim(paste0(annovar_path, anno_name), sep = "\t"))
names(anno)[1:5] <- c("CHROM", "POS", "END", "REF", "ALT")
combined <- merge(x = sample, y = anno, by = c("CHROM", "POS", "ALT", "REF")) # merge!
combined[combined == "."] <- NA # replace all dots with NA, makes it easier to filter later on
combined <- Filter(function(x) !all(is.na(x)), combined) # drop cols if they are all filled with NA
status_list <- apply(combined, 1, filter_variants) # apply the function to every row to make of list of pass or fail status
idx <- which(status_list == "GOOD")
combined_filtered <- combined[idx, ]
path <- paste0("/groups/wyattgrp/users/amunzur/chip_project/chip_mutations/", file_name)
write_delim(combined_filtered, path, delim = "\t")
}
df_path <- "/groups/wyattgrp/users/amunzur/chip_project/chip_mutations/GU-17-055.csv"
bed_path <- "/groups/wyattgrp/users/echen/baits_hg38.bed"
df <- read.csv(df_path)
bed_path <- read.delim(bed_path, delim = "\t", header = TRUE)
bed_path <- read.delim(bed_path, header = TRUE)
bed_path <- "/groups/wyattgrp/users/echen/baits_hg38.bed"
bed <- read.delim(bed_path, header = TRUE)
View(bed)
bed
bed$chrom
head(bed)
head(df\)
head(df)
head(bed)
head(df[1:4])
head(df[, 1:4])
head(df[, c(1, 2, 3, 4)])
dim(df)
View(df)
# Given a bed file and a csv file that has variant information, filter the df to retain the regions in the bed file only.
df <- read.delim(df_path, header = TRUE)
bed_path <- read.delim(bed_path, header = TRUE)
df_path
df_path <- "/groups/wyattgrp/users/amunzur/chip_project/chip_mutations/GU-17-055.tsv"
df_poath
# Given a bed file and a csv file that has variant information, filter the df to retain the regions in the bed file only.
df <- read.delim(df_path, header = TRUE)
bed <- read.delim(bed_path, header = TRUE)
bed_path
bed_path <- "/groups/wyattgrp/users/echen/baits_hg38.bed"
bed <- read.delim(bed_path, header = TRUE)
df[, 1:4]
df[, 1:2]
head(df[, 1:2])
head(bed)
df %>% mutate(bed_status = POS >= bed$start & POS <= bed$stop)
bed$start
df[, 1:2]
as.list(df[, 1:2])
i = 1
chrom <- df[i, ]$CHROM
chrom
chrom <- as.vector(df[i, ]$CHROM )
chrom
head(bed)
chrom_df <- as.vector(df[i, ]$CHROM)
pos_df <- as.vector(df[i, ]$POS)
bed_chrom <- bed %>% filter(chrom == chrom_df) # filter the bed file to retain the chrom of interest
bed_chrom
pos_df >= bed$start & pos <= bed$stop
pos_df >= bed$start & pos_df <= bed$stop
any(pos_df >= bed$start & pos_df <= bed$stop)
which(pos_df >= bed$start & pos_df <= bed$stop)
bed$start
df <- read.delim(df_path, header = TRUE)
bed <- read.delim(bed_path, header = TRUE)
i = 1
bed_status <- list()
while (i <= length(df)){
# extract chrom and position from the df
chrom_df <- as.vector(df[i, ]$CHROM)
pos_df <- as.vector(df[i, ]$POS)
bed_chrom <- bed %>% filter(chrom == chrom_df) # filter the bed file to retain the chrom of interest
if (any(pos_df >= bed$start & pos <= bed$stop)) {bed_status <- append(bed_status, "keep")} else {bed_status <- append(bed_status, "remove")}
i <- i + 1
}
df <- read.delim(df_path, header = TRUE)
bed <- read.delim(bed_path, header = TRUE)
i = 1
bed_status <- list()
while (i <= length(df)){
# extract chrom and position from the df
chrom_df <- as.vector(df[i, ]$CHROM)
pos_df <- as.vector(df[i, ]$POS)
bed_chrom <- bed %>% filter(chrom == chrom_df) # filter the bed file to retain the chrom of interest
if (any(pos_df >= bed$start & pos_df <= bed$stop)) {bed_status <- append(bed_status, "keep")} else {bed_status <- append(bed_status, "remove")}
i <- i + 1
}
bed_status
bed_status[bed_status == "keep"]
idx <- which(bed_status == "keep")
idx
bed_path
library(tidyverse)
filter_variants_frequency <- function(r){
# Given a row that has variant information, add a PASS or FAIL status based on AF.
idx <- which(unlist(r) > 0 & unlist(r) < 1) # identify all elements that are between 0 and 1, they are the allele frequencies
if (length(idx) == 0 | any(r[idx] > 0.05)) {
return("BAD")
} else if (all(r[idx] < 0.05)){
return("GOOD")
}
}
filter_variants_bed <- function(df, bed){
# Given a bed file and a csv file that has variant information, filter the df to retain the regions in the bed file only.
i = 1
bed_status <- list()
while (i <= length(df)){
# extract chrom and position from the df
chrom_df <- as.vector(df[i, ]$CHROM)
pos_df <- as.vector(df[i, ]$POS)
bed_chrom <- bed %>% filter(chrom == chrom_df) # filter the bed file to retain the chrom of interest
if (any(pos_df >= bed$start & pos_df <= bed$stop)) {bed_status <- append(bed_status, "keep")} else {bed_status <- append(bed_status, "remove")}
i <- i + 1
}
idx <- which(bed_status == "keep")
df_filtered <- df[idx, ]
return(df)
}
annovar_path <- "/groups/wyattgrp/users/amunzur/chip_project/annovar_results/ctDNA_prognosis/"
common_variants_path <- "/groups/wyattgrp/users/amunzur/chip_project/common_variants/"
bed_path <- "/groups/wyattgrp/users/echen/baits_hg38.bed"
# load the dfs with common variants
for (file_name in list.files(common_variants_path)) {
sample_name <- strsplit(file_name, ".csv")[[1]][[1]]
noquote(c("Started sample", sample_name))
idx <- grep(paste0("^", sample_name, ".+_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt$"),
list.files(annovar_path))
anno_name <- list.files(annovar_path)[idx]
# load both files
sample <- read.csv(paste0(common_variants_path, file_name))
sample$X <- NULL
anno <- as.data.frame(read.delim(paste0(annovar_path, anno_name), sep = "\t"))
names(anno)[1:5] <- c("CHROM", "POS", "END", "REF", "ALT")
# KEEP ONLY COMMON ONES
combined <- merge(x = sample, y = anno, by = c("CHROM", "POS", "ALT", "REF")) # merge!
combined[combined == "."] <- NA # replace all dots with NA, makes it easier to filter later on
combined <- Filter(function(x) !all(is.na(x)), combined) # drop cols if they are all filled with NA
# REMOVE GERM LINE BASED ON DATABASE INFORMATION
status_list <- apply(combined, 1, filter_variants_frequency) # apply the function to every row to make of list of pass or fail status
idx <- which(status_list == "GOOD")
combined_filtered <- combined[idx, ]
# FILTERING BASED ON BED FILE
bed <- read.delim(bed_path, header = TRUE)
combined_filtered <- filter_variants_bed(combined_filtered, bed)
path <- paste0("/groups/wyattgrp/users/amunzur/chip_project/chip_mutations/", sample_name, ".tsv")
write_delim(combined_filtered, path, delim = "\t")
}
library(tidyverse)
filter_variants_frequency <- function(r){
# Given a row that has variant information, add a PASS or FAIL status based on AF.
idx <- which(unlist(r) > 0 & unlist(r) < 1) # identify all elements that are between 0 and 1, they are the allele frequencies
if (length(idx) == 0 | any(r[idx] > 0.05)) {
return("BAD")
} else if (all(r[idx] < 0.05)){
return("GOOD")
}
}
filter_variants_bed <- function(df, bed){
# Given a bed file and a csv file that has variant information, filter the df to retain the regions in the bed file only.
i = 1
bed_status <- list()
while (i <= length(df)){
# extract chrom and position from the df
chrom_df <- as.vector(df[i, ]$CHROM)
pos_df <- as.vector(df[i, ]$POS)
bed_chrom <- bed %>% filter(chrom == chrom_df) # filter the bed file to retain the chrom of interest
if (any(pos_df >= bed$start & pos_df <= bed$stop)) {bed_status <- append(bed_status, "keep")} else {bed_status <- append(bed_status, "remove")}
i <- i + 1
}
idx <- which(bed_status == "keep")
df_filtered <- df[idx, ]
return(df)
}
annovar_path <- "/groups/wyattgrp/users/amunzur/chip_project/annovar_results/ctDNA_prognosis/"
common_variants_path <- "/groups/wyattgrp/users/amunzur/chip_project/common_variants/"
bed_path <- "/groups/wyattgrp/users/echen/baits_hg38.bed"
# load the dfs with common variants
for (file_name in list.files(common_variants_path)) {
sample_name <- strsplit(file_name, ".csv")[[1]][[1]]
noquote(c("Started sample", sample_name))
idx <- grep(paste0("^", sample_name, ".+_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt$"),
list.files(annovar_path))
anno_name <- list.files(annovar_path)[idx]
# load both files
sample <- read.csv(paste0(common_variants_path, file_name))
sample$X <- NULL
anno <- as.data.frame(read.delim(paste0(annovar_path, anno_name), sep = "\t"))
names(anno)[1:5] <- c("CHROM", "POS", "END", "REF", "ALT")
# KEEP ONLY COMMON ONES
combined <- merge(x = sample, y = anno, by = c("CHROM", "POS", "ALT", "REF")) # merge!
combined[combined == "."] <- NA # replace all dots with NA, makes it easier to filter later on
combined <- Filter(function(x) !all(is.na(x)), combined) # drop cols if they are all filled with NA
# REMOVE GERM LINE BASED ON DATABASE INFORMATION
status_list <- apply(combined, 1, filter_variants_frequency) # apply the function to every row to make of list of pass or fail status
idx <- which(status_list == "GOOD")
combined_filtered <- combined[idx, ]
# FILTERING BASED ON BED FILE
bed <- read.delim(bed_path, header = TRUE)
combined_filtered <- filter_variants_bed(combined_filtered, bed)
path <- paste0("/groups/wyattgrp/users/amunzur/chip_project/bed_variants/", sample_name, ".tsv")
write_delim(combined_filtered, path, delim = "\t")
}
pos_df
bed_start
head(bed$start)
any(pos_df >= bed$start & pos_df <= bed$stop)
bed$start
pos_df >= bed$start & pos_df <= bed$stop
i
dim(df)
chrom_df
chrom_df <- as.vector(df[i, ]$CHROM)
pos_df <- as.vector(df[i, ]$POS)
bed_chrom <- bed %>% filter(chrom == chrom_df) # filter the bed file to retain the chrom of interest
chrom_df
pos_df
is.na(bed_chrom)
is.na(pos_df >= bed$start & pos_df <= bed$stop)
which(is.na(pos_df >= bed$start & pos_df <= bed$stop))
library(tidyverse)
filter_variants_frequency <- function(r){
# Given a row that has variant information, add a PASS or FAIL status based on AF.
idx <- which(unlist(r) > 0 & unlist(r) < 1) # identify all elements that are between 0 and 1, they are the allele frequencies
if (length(idx) == 0 | any(r[idx] > 0.05)) {
return("BAD")
} else if (all(r[idx] < 0.05)){
return("GOOD")
}
}
filter_variants_bed <- function(df, bed){
# Given a bed file and a csv file that has variant information, filter the df to retain the regions in the bed file only.
i = 1
bed_status <- list()
while (i <= length(df)){
# extract chrom and position from the df
chrom_df <- as.vector(df[i, ]$CHROM)
pos_df <- as.vector(df[i, ]$POS)
bed_chrom <- bed %>% filter(chrom == chrom_df) # filter the bed file to retain the chrom of interest
if (any(pos_df >= bed$start & pos_df <= bed$stop)) {bed_status <- append(bed_status, "keep")} else {bed_status <- append(bed_status, "remove")}
i <- i + 1
}
idx <- which(bed_status == "keep")
df_filtered <- df[idx, ]
return(df)
}
annovar_path <- "/groups/wyattgrp/users/amunzur/chip_project/annovar_results/ctDNA_prognosis/"
common_variants_path <- "/groups/wyattgrp/users/amunzur/chip_project/common_variants/"
bed_path <- "/groups/wyattgrp/users/echen/baits_hg38.bed"
# load the dfs with common variants
for (file_name in list.files(common_variants_path)) {
sample_name <- strsplit(file_name, ".csv")[[1]][[1]]
noquote(c("Started sample", sample_name))
idx <- grep(paste0("^", sample_name, ".+_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt$"),
list.files(annovar_path))
anno_name <- list.files(annovar_path)[idx]
# load both files
sample <- read.csv(paste0(common_variants_path, file_name))
sample$X <- NULL
anno <- as.data.frame(read.delim(paste0(annovar_path, anno_name), sep = "\t"))
names(anno)[1:5] <- c("CHROM", "POS", "END", "REF", "ALT")
# KEEP ONLY COMMON ONES
combined <- merge(x = sample, y = anno, by = c("CHROM", "POS", "ALT", "REF")) # merge!
combined[combined == "."] <- NA # replace all dots with NA, makes it easier to filter later on
combined <- Filter(function(x) !all(is.na(x)), combined) # drop cols if they are all filled with NA
# REMOVE GERM LINE BASED ON DATABASE INFORMATION
status_list <- apply(combined, 1, filter_variants_frequency) # apply the function to every row to make of list of pass or fail status
idx <- which(status_list == "GOOD")
combined_filtered <- combined[idx, ]
# FILTERING BASED ON BED FILE
bed <- read.delim(bed_path, header = TRUE)
combined_filtered <- filter_variants_bed(combined_filtered, bed)
path <- paste0("/groups/wyattgrp/users/amunzur/chip_project/bed_variants/", sample_name, ".tsv")
write_delim(combined_filtered, path, delim = "\t")
}
i
length(df)
dim
dim(df)
nrow(df)
library(tidyverse)
filter_variants_frequency <- function(r){
# Given a row that has variant information, add a PASS or FAIL status based on AF.
idx <- which(unlist(r) > 0 & unlist(r) < 1) # identify all elements that are between 0 and 1, they are the allele frequencies
if (length(idx) == 0 | any(r[idx] > 0.05)) {
return("BAD")
} else if (all(r[idx] < 0.05)){
return("GOOD")
}
}
filter_variants_bed <- function(df, bed){
# Given a bed file and a csv file that has variant information, filter the df to retain the regions in the bed file only.
i = 1
bed_status <- list()
while (i <= nrow(df)){
# extract chrom and position from the df
chrom_df <- as.vector(df[i, ]$CHROM)
pos_df <- as.vector(df[i, ]$POS)
bed_chrom <- bed %>% filter(chrom == chrom_df) # filter the bed file to retain the chrom of interest
if (any(pos_df >= bed$start & pos_df <= bed$stop)) {bed_status <- append(bed_status, "keep")} else {bed_status <- append(bed_status, "remove")}
i <- i + 1
}
idx <- which(bed_status == "keep")
df_filtered <- df[idx, ]
return(df)
}
annovar_path <- "/groups/wyattgrp/users/amunzur/chip_project/annovar_results/ctDNA_prognosis/"
common_variants_path <- "/groups/wyattgrp/users/amunzur/chip_project/common_variants/"
bed_path <- "/groups/wyattgrp/users/echen/baits_hg38.bed"
# load the dfs with common variants
for (file_name in list.files(common_variants_path)) {
sample_name <- strsplit(file_name, ".csv")[[1]][[1]]
print(c("Started sample", sample_name))
idx <- grep(paste0("^", sample_name, ".+_vcf_FILTERED_vcf.ANNOTATED.hg38_multianno.txt$"),
list.files(annovar_path))
anno_name <- list.files(annovar_path)[idx]
# load both files
sample <- read.csv(paste0(common_variants_path, file_name))
sample$X <- NULL
anno <- as.data.frame(read.delim(paste0(annovar_path, anno_name), sep = "\t"))
names(anno)[1:5] <- c("CHROM", "POS", "END", "REF", "ALT")
# KEEP ONLY COMMON ONES
combined <- merge(x = sample, y = anno, by = c("CHROM", "POS", "ALT", "REF")) # merge!
combined[combined == "."] <- NA # replace all dots with NA, makes it easier to filter later on
combined <- Filter(function(x) !all(is.na(x)), combined) # drop cols if they are all filled with NA
# REMOVE GERM LINE BASED ON DATABASE INFORMATION
status_list <- apply(combined, 1, filter_variants_frequency) # apply the function to every row to make of list of pass or fail status
idx <- which(status_list == "GOOD")
combined_filtered <- combined[idx, ]
# FILTERING BASED ON BED FILE
bed <- read.delim(bed_path, header = TRUE)
combined_filtered <- filter_variants_bed(combined_filtered, bed)
path <- paste0("/groups/wyattgrp/users/amunzur/chip_project/bed_variants/", sample_name, ".tsv")
write_delim(combined_filtered, path, delim = "\t")
}
library(tidyverse)
library(ggrepel)
library(grid)
library(plotly)
path_to_curated_combined <-"/groups/wyattgrp/users/amunzur/chip_project/tnvstats_mutect_compared/combined.csv" # all muts are here, inbdicating whether they are found in only one pipeline or both
# to write
path_to_figure <- "/groups/wyattgrp/users/amunzur/chip_project/figures/combined_fig.pdf"
df <- as.data.frame(read_csv(path_to_curated_combined)) # read the main data we will be plotting
df <- transform(df, labelling = paste(CHROM, POSITION, sep=", ")) # combine two cols, they will be used to label the dots
pl <- ggplot(df, aes(x = VAF, y = WBC_VAF, color = STATUS)) +
geom_point(size = 2) +
geom_label_repel(aes(label = labelling),
box.padding   = 0.35,
point.padding = 0.5,
segment.color = 'grey50') +
theme_bw()
p <- plot_ly(data = df,
x = ~VAF, y = ~WBC_VAF,
opacity = 1,
color = ~STATUS,
type = "scatter",
mode = "markers",
marker = list(size = 5),
colors = colors_list) %>%
layout(legend= list(itemsizing='constant'))
p <- plot_ly(data = df,
x = ~VAF, y = ~WBC_VAF,
opacity = 1,
color = ~STATUS,
type = "scatter",
mode = "markers",
marker = list(size = 5)) %>%
layout(legend= list(itemsizing='constant'))
p
p <- plot_ly(data = df,
x = ~VAF, y = ~WBC_VAF,
opacity = 1,
color = ~STATUS,
type = "scatter",
mode = "markers",
marker = list(size = 5),
text = ~labelling) %>%
layout(legend= list(itemsizing='constant'))
p
p <- plot_ly(data = df,
x = ~VAF, y = ~WBC_VAF,
opacity = 1,
color = ~STATUS,
type = "scatter",
mode = "markers",
marker = list(size = 5),
text = ~labelling,
hoverinfo = 'text') %>%
layout(legend= list(itemsizing='constant'))
p
p <- plot_ly(data = df,
x = ~VAF, y = ~WBC_VAF,
opacity = 1,
color = ~STATUS,
type = "scatter",
mode = "markers",
marker = list(size = 8),
text = ~labelling,
hoverinfo = 'text') %>%
layout(legend= list(itemsizing='constant'))
p
pl
p
pl
path_to_tnvstats <- "/groups/wyattgrp/users/amunzur/chip_project/tnvstats_new"
path_to_curated_combined <-"/groups/wyattgrp/users/amunzur/chip_project/tnvstats_mutect_compared/combined.csv" # all muts are here, inbdicating whether they are found in only one pipeline or both
path_to_final <- "/groups/wyattgrp/users/amunzur/chip_project/tnvstats_mutect_compared/only_mutect_samples_info.csv" # this is the pah to the df that contains tnvstat information for samples that only mutect identified
combined <- as.data.frame(read_csv(path_to_curated_combined))
mutect <- combined %>% filter(STATUS == "mutect_only") # get mutect only
tumor_ids <- lapply(as.list(mutect$SAMPLE_ID), function(some_name) paste(some_name, "bam", sep = ".")) # add the ".bam" to tumor ids
tumor_ids <- lapply(tumor_ids, function(some_name) file.path(path_to_tnvstats, some_name, paste0(some_name, ".tnvstat")))
tnvstats <- lapply(tumor_ids, read.delim) # load all tnvstats at once, and filter based on the locations we are interested in
i <- 1
filtered_list <- list() # an empty list to append the bits and pieces from the filtered tnvstats
while (i <= dim(mutect)[1]){
tnvstat <-  as.data.frame(tnvstats[i]) # load the tnv stat for the related sample
filtered <- as.data.frame(unlist(tnvstat %>% filter(chrom == mutect$CHROM[i], pos == mutect$POSITION[i])))
filtered_list <- append(filtered_list, filtered)
i <- i + 1
print(i)
print(to_filter)
print(filtered)
}
df <- as.data.frame(do.call(rbind, filtered_list)) # combine all pieces into one large df
df
filtered
typeof(filtered)
names(filtered)
